using System;
using System.Collections.Generic;

namespace ProjectEuler
{
	/// <summary>
	/// Highly divisible triangular number
	/// 
	/// 
	/// The sequence of triangle numbers is generated by adding the natural numbers.
	/// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	/// The first ten terms would be:
	/// 
	/// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	/// 
	/// Let us list the factors of the first seven triangle numbers:
	/// 
	///  1: 1
	///  3: 1,3
	///  6: 1,2,3,6
	/// 10: 1,2,5,10
	/// 15: 1,3,5,15
	/// 21: 1,3,7,21
	/// 28: 1,2,4,7,14,28
	/// We can see that 28 is the first triangle number to have over five divisors.
	/// 
	/// What is the value of the first triangle number to have over five hundred divisors?
	/// </summary>
	class Problem012
	{
		/*
			https://en.wikipedia.org/wiki/Triangular_number
			
			Tn = n(n+1) / 2 
		*/

		const int DIVISOR_MIN_COUNT = 501;

		public long Solve()
		{
			DateTime startTime = DateTime.Now;
			// ===============================

			long retVal = 0;

			int tIndx = 0;
			bool found = false;
			while( !found )
			{
				++tIndx; // inc Tn

				int sumRes = (tIndx * ( tIndx + 1 )) >> 1;

				Helper.SumAndList<int> rStruct = Helper.GetFactors( sumRes );
				if( rStruct.valList.Count >= DIVISOR_MIN_COUNT)
				{
					found = true;
					retVal = tIndx;
				}
			}


			// ===============================
			DateTime stopTime = DateTime.Now;
			Console.WriteLine( "---Solution 12 took {0} ms", ( stopTime - startTime ).Milliseconds );
			// ===============================

			return retVal;
		}
	}
}
